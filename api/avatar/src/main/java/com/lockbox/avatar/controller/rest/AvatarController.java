package com.lockbox.avatar.controller.rest;

import com.lockbox.avatar.controller.response.ApiResponse;
import com.lockbox.avatar.controller.response.file.PresignedLinkResponse;
import com.lockbox.avatar.s3.service.PresignedUrlService;
import com.lockbox.avatar.security.auth.model.CustomUserDetails;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.log4j.Log4j2;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;

/**
 * REST controller responsible for handling avatar-related operations.
 * This controller provides endpoints for generating presigned URLs that allow users
 * to securely upload and download their avatar images without exposing direct access
 * to the storage system.
 *
 * <p>Presigned URLs are short-lived links generated by the system that enable
 * users to perform operations on their avatar files while ensuring security
 * and controlled access. These URLs are particularly useful in distributed
 * systems where media assets need to be managed efficiently.</p>
 *
 * <p>Utilizes {@link PresignedUrlService} to handle the generation of presigned URLs
 * and ensures that only authenticated users can upload their avatars.</p>
 *
 * <p>Endpoints provided by this controller:</p>
 * <ul>
 *     <li>{@code POST /upload} - Generates a presigned URL for uploading an avatar.</li>
 *     <li>{@code GET /get} - Generates a presigned URL for downloading an avatar.</li>
 * </ul>
 *
 * <p>Uses Reactor's {@link Mono} for asynchronous execution, ensuring non-blocking I/O operations.</p>
 *
 * @author serezk4
 * @version 1.0
 * @since 1.0
 */
@RestController
@RequestMapping
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Validated
@Log4j2
public class AvatarController {

    /**
     * Service responsible for generating secure, temporary presigned URLs
     * that allow users to upload and download their avatar images.
     *
     * <p>Provides methods for obtaining presigned URLs that are time-limited
     * and ensure secure access to media resources.</p>
     */
    PresignedUrlService presignedUrlService;

    /**
     * Generates a presigned URL for securely uploading an avatar.
     * This endpoint ensures that only authenticated users can request an upload URL.
     *
     * <p>Once generated, the presigned URL allows the user to upload an avatar directly
     * to the designated storage system without requiring direct access credentials.</p>
     *
     * @param userDetails The authenticated user's details, providing access to the user's unique identifier.
     * @return A {@link Mono} wrapping a {@link ResponseEntity} containing an {@link ApiResponse.Body}
     * with a presigned URL for avatar upload.
     */
    @PostMapping("/upload")
    public Mono<ResponseEntity<ApiResponse.Body<PresignedLinkResponse>>> upload(
            final @AuthenticationPrincipal CustomUserDetails userDetails
    ) {
        return presignedUrlService.getUploadLink(userDetails.getSub())
                .map(PresignedLinkResponse::new).map(ApiResponse::ok);
    }

    /**
     * Generates a presigned URL for securely downloading an avatar.
     * This endpoint allows retrieval of an avatar associated with a specific user,
     * ensuring access control and security.
     *
     * <p>Users can request a presigned URL by providing the unique subject identifier (sub)
     * of the target user. The generated URL allows temporary access to the avatar file.</p>
     *
     * @param sub The unique identifier of the user whose avatar is being requested.
     * @return A {@link Mono} wrapping a {@link ResponseEntity} containing an {@link ApiResponse.Body}
     * with a presigned URL for avatar download.
     */
    @GetMapping("/get")
    public Mono<ResponseEntity<ApiResponse.Body<PresignedLinkResponse>>> get(
            final @RequestParam("sub") String sub,
            final @AuthenticationPrincipal CustomUserDetails userDetails
    ) {
        return presignedUrlService.getDownloadLink(userDetails != null ? userDetails.getSub() : sub)
                .map(PresignedLinkResponse::new).map(ApiResponse::ok);
    }
}
